/**
* 一些常用方法集合
*/
var _ = require('lodash');
// var FormData = require('form-data');
var utils = {
    parseRestUrl: function (url, data) {
            var reg = /\/:(\w+)/gi;
            var routeParams = url.match(reg);
            if (_.isEmpty(data)) {
                return url;
            }
            if (!_.isEmpty(routeParams)) {
                _.each(routeParams, function (routeParam, index) {
                var keyName = routeParam.replace('/:', '');
                if(data[keyName] !== undefined){
                    url = url.replace(':' + keyName, data[keyName]);
                }
            })}
        return url;},
    jsonToUrlParam: function (data) {
        return Object.keys(data).map(function(k) {
            return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])
        }).join('&')
    },
    pluck: function (collection, key) {
        var result = [];
        _.each(collection, function (item) {
            if (!_.isEmpty(item[key])) {
                result.push(item[key]);
            }
        })
        return result;
    },

    // check if is http
    isHttp: function (str) {
        if (!str) {
            return false;
        }

        var httpReg = /^(http||https):\/\//;
            return httpReg.test(str);
        },

        // 格式化URL
        parseUrl: function (str, defaultProto) {
            if (!str) {
                return false;
            }

        // 默认使用http
        defaultProto = defaultProto || 'http://';

        if (this.isHttp(str)) {
            return str;
        } else {
        // 清除没用的前缀
            str = str.replace('//', '');
            return defaultProto + str;
        }
    },

    getUrlWithoutProto: function (url) {
        if (!url) {
            console.log('warining:', 'url is empty');
            return '';
        }

        if (this.isHttp(url)) {
            return url.replace(/^(http||https):\/\//, '');
        } else {
            return url.replace('//', '');
        }
    },

    // 获取请求协议
    getProtoFromUrl: function (url) {
        if (!url) {
            return '';
        }
        var protocolre = /^([a-z][a-z0-9.+-]*)?(:\/\/)?([\S\s]*)/i;
        var match = protocolre.exec(url);
        return match[1] ? match[1].toUpperCase() : ''
    },

/**
* 时间格式化 返回格式化的时间
* 格式：
*    YYYY：4位年,如1993
*　　YY：2位年,如93
*　　MM：月份
*　　DD：日期
*　　hh：小时
*　　mm：分钟
*　　ss：秒钟
*　　星期：星期，返回如 星期二
*　　周：返回如 周二
*　　week：英文星期全称，返回如 Saturday
*　　www：三位英文星期，返回如 Sat
* @method SC.util.formatDate
* @param {object} date   可选参数，要格式化的data对象，没有则为当前时间
* @param {string} fomat  格式化字符串，例如：'YYYY年MM月DD日 hh时mm分ss秒 星期' 'YYYY/MM/DD week' (中文为星期，英文为week)
* @return {string} 返回格式化的字符串
*
* 例子:
* @example
*   formatDate(new Date("january 01,2012"));
* @example
*   formatDate(new Date());
* @example
*   formatDate('YYYY年MM月DD日 hh时mm分ss秒 星期 YYYY-MM-DD week');
* @example
*   formatDate(new Date("january 01,2012"),'YYYY年MM月DD日 hh时mm分ss秒 星期 YYYY/MM/DD week');
*/
    formatDate: function (date, format) {
        if (arguments.length < 2 && !date.getTime) {
            format = date;
            date = new Date();
        }
        typeof format != 'string' && (format = seewoLang.time_formate1);
        var week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', '星期天', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
        return format.replace(/YYYY|YY|MM|DD|hh|mm|ss|www|week/g, function (a) {
        switch (a) {
            case "YYYY":
                return date.getFullYear();
            case "YY":
                return (date.getFullYear() + "").slice(2);
            case "MM":
                return (date.getMonth() + 1 + "").length < 2 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
            case "DD":
                return (date.getDate() + "").length < 2 ? "0" + date.getDate() : date.getDate();
            case "hh":
                return (date.getHours() + "").length < 2 ? "0" + date.getHours() : date.getHours();
            case "mm":
                return (date.getMinutes() + "").length < 2 ? "0" + date.getMinutes() : date.getMinutes();
            case "ss":
                return (date.getSeconds() + "").length < 2 ? "0" + date.getSeconds() : date.getSeconds();
            case "星期":
                return "星期" + week[date.getDay() + 7];
            case "week":
                return week[date.getDay()];
            case "www":
                return week[date.getDay()].slice(0, 3);
            default:
            return '';
        }
    });
}
};

module.exports = utils;
